#!/usr/bin/env python3
"""
Route 53 backup-and-restore helper with logging and dated backup folder

Features
========
* **Backup a single zone** to `backupDATE/domain_YYYYMMDD.json` (`--backup`).
* **Backup all zones** to `backupDATE/domain_YYYYMMDD.json` files (`--backup-all`).
* **Restore** from a list-record output, producing a change batch or optionally applying it (`--input`, `--apply`).
* **Log file** saved in the same `backupDATE` folder as the backup files.
* Handles long TXT records (splits at 255-char chunks).
* Skips apex SOA/NS when restoring to avoid conflicts with default records.

Requires Python 3.8+ and `boto3` (only for AWS calls).

Examples
--------
```bash
# Backup all zones
python route53_restore.py --backup-all

# Backup a single zone
python route53_restore.py --backup --zone-id ZONEID

# Convert a backup to restore.json
python route53_restore.py --input records.json

# Convert and immediately apply
python route53_restore.py -i records.json -z ZONEID --apply
```
"""
import argparse
import json
import logging
import os
import sys
from datetime import datetime
from typing import Dict, List

try:
    import boto3  # type: ignore
except ModuleNotFoundError:
    boto3 = None  # type: ignore

CHUNK_SIZE = 255  # TXT string chunk limit
BACKUP_DIR = None

def setup_logging(backup_dir: str) -> str:
    """Configure root logger to file + stdout, return logfile name."""
    os.makedirs(backup_dir, exist_ok=True)
    logfile = os.path.join(backup_dir, "route53_backup.log")

    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
        handlers=[logging.FileHandler(logfile), logging.StreamHandler(sys.stdout)],
        force=True,
    )

    logging.info("Logging to %s", logfile)
    return logfile

def split_txt_value(value: str) -> str:
    stripped = value.strip('"')
    if len(stripped) <= CHUNK_SIZE:
        return value if value.startswith('"') else f'"{stripped}"'

    parts = [stripped[i:i + CHUNK_SIZE] for i in range(0, len(stripped), CHUNK_SIZE)]
    return " ".join(f'"{p}"' for p in parts)

def build_change_batch(rrsets: List[Dict]) -> Dict:
    """
    Build a change batch for restoring Route 53 records.

    - Skips SOA and NS records at the apex of the zone. These are automatically created
      and managed by Route 53, and re-adding them can cause errors.
    - Splits long TXT record strings into chunks of up to 255 characters, which is the
      maximum per-string size in DNS.
    """
    apex_name = next((r["Name"] for r in rrsets if r["Type"] == "SOA"), None)
    changes = []

    for record in rrsets:
        name = record["Name"]
        rtype = record["Type"]

        # Skip SOA and NS for apex
        if rtype in ("SOA", "NS") and name == apex_name:
            continue

        # TXT record handling: split values into <=255 char quoted segments
        if rtype == "TXT":
            record["ResourceRecords"] = [
                {"Value": split_txt_value(r["Value"])} for r in record["ResourceRecords"]
            ]

        changes.append({"Action": "UPSERT", "ResourceRecordSet": record})

    return {"Comment": "Auto-generated by route53_restore.py", "Changes": changes}

def backup_zone(zone_id: str, filename: str):
    if boto3 is None:
        logging.error("boto3 not installed; run `pip install boto3`.")
        sys.exit(1)

    client = boto3.client("route53")
    records: List[Dict] = []
    paginator = client.get_paginator("list_resource_record_sets")

    for page in paginator.paginate(HostedZoneId=zone_id):
        records.extend(page["ResourceRecordSets"])

    with open(filename, "w", encoding="utf-8") as f:
        json.dump({"ResourceRecordSets": records}, f, indent=2)

    logging.info("[+] backed up %d records to %s", len(records), filename)

def backup_all_zones(backup_dir: str):
    if boto3 is None:
        logging.error("boto3 not installed; run `pip install boto3`.")
        sys.exit(1)

    client = boto3.client("route53")
    zones = client.list_hosted_zones()["HostedZones"]
    date_str = datetime.utcnow().strftime("%Y%m%d")

    for zone in zones:
        zone_id = zone["Id"].split("/")[-1]
        zone_name = zone["Name"].rstrip(".")
        filename = os.path.join(backup_dir, f"{zone_name}_{date_str}.json")
        backup_zone(zone_id, filename)

def main() -> None:
    parser = argparse.ArgumentParser(description="Route 53 backup / restore utility")
    parser.add_argument("--input", "-i", help="Backup JSON (from list-resource-record-sets)")
    parser.add_argument("--output", "-o", default="restore.json", help="Output file name")
    parser.add_argument("--zone-id", "-z", help="Hosted Zone ID")
    parser.add_argument("--apply", action="store_true", help="Apply changes to Route 53 (needs boto3)")
    parser.add_argument("--backup", action="store_true", help="Back up a single zone")
    parser.add_argument("--backup-all", action="store_true", help="Back up all zones into domain_YYYYMMDD.json files")

    args = parser.parse_args()

    # Setup backup directory with timestamp
    timestamp = datetime.utcnow().strftime("%Y%m%d_%H%M%S")
    backup_dir = f"backup{timestamp}"

    # Always set up logging first
    setup_logging(backup_dir)

    if args.backup_all:
        backup_all_zones(backup_dir)
        return

    if args.backup:
        if not args.zone_id:
            logging.error("--zone-id is required with --backup")
            sys.exit(1)

        output_path = os.path.join(backup_dir, args.output)
        backup_zone(args.zone_id, output_path)
        return

    if not args.input:
        logging.error("--input is required unless --backup or --backup-all is used")
        sys.exit(1)

    try:
        with open(args.input, "r", encoding="utf-8") as f:
            backup_data = json.load(f)
    except FileNotFoundError:
        logging.error("file not found: %s", args.input)
        sys.exit(1)

    if "ResourceRecordSets" not in backup_data:
        logging.error("input JSON does not look like list-resource-record-sets output")
        sys.exit(1)

    change_batch = build_change_batch(backup_data["ResourceRecordSets"])

    with open(args.output, "w", encoding="utf-8") as f:
        json.dump(change_batch, f, indent=2)
    logging.info("[+] wrote %s (≥%d changes)", args.output, len(change_batch["Changes"]))

    if not args.apply:
        return

    if not args.zone_id:
        logging.error("--zone-id is required with --apply")
        sys.exit(1)

    if boto3 is None:
        logging.error("boto3 not installed; run `pip install boto3`.")
        sys.exit(1)

    client = boto3.client("route53")
    try:
        resp = client.change_resource_record_sets(HostedZoneId=args.zone_id, ChangeBatch=change_batch)
    except Exception as e:
        logging.error("Route 53 API error: %s", e)
        sys.exit(1)

    info = resp["ChangeInfo"]
    logging.info("[+] submitted change %s – status %s", info["Id"], info["Status"])

if __name__ == "__main__":
    main()
